LeetCode-106-Construct Binary Tree from Inorder and Postorder Traversal
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildHelper(int[] inorder,int inStart,int inEnd,int[] postorder,int postStart,int postEnd){
        if(postStart>postEnd || inStart>inEnd){
            return null;
        }
        
        int rootValue = postorder[postEnd];
        int rootIndex = 0;
        
        for(int i=inStart;i<=inEnd;i++){
            if(inorder[i]==rootValue){
                rootIndex = i;
                break;
            }
        }
        
        TreeNode root = new TreeNode(rootValue);
        int len = rootIndex-inStart;
        root.left = buildHelper(inorder,inStart,rootIndex-1,postorder,postStart,postStart+len-1);
        root.right = buildHelper(inorder,rootIndex+1,inEnd,postorder,postStart+len,postEnd-1);
        
        return root;
    }
    
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return buildHelper(inorder,0,inorder.length-1,postorder,0,postorder.length-1);
    }
}
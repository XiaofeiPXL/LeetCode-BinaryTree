LeetCode-101-Symmetric Tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null){
            return true;
        }
        if(root.left==null && root.right==null){
            return true;
        }
        if(root.left==null || root.right==null){
            return false;
        }
        
        Queue<TreeNode> q1 = new LinkedList<TreeNode>();
        Queue<TreeNode> q2 = new LinkedList<TreeNode>();
        
        q1.offer(root.left);
        q2.offer(root.right);
        
        while(!q1.isEmpty()&&!q2.isEmpty()){
            TreeNode n1 = q1.poll();
            TreeNode n2 = q2.poll();
            if(n1.val != n2.val){
                return false;
            }
            if((n1.left==null && n2.right!=null) || (n1.left!=null && n2.right==null)){
                return false;
            }
            if((n1.right==null && n2.left!=null) || (n1.right!=null && n2.left==null)){
                return false;
            }
            if(n1.left != null && n2.right != null){
              q1.offer(n1.left);
              q2.offer(n2.right);
            }
            if(n1.right != null && n2.left != null){
              q1.offer(n1.right);
              q2.offer(n2.left);
            }          
        }
        return true;
    }
}
105. Construct Binary Tree from Preorder and Inorder Traversal
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int preLength = preorder.length;
        int inLength = inorder.length;
        
        return build(preorder,0,preLength-1,inorder,0,inLength-1);
    }
    
    public TreeNode build(int[] pre,int preStart,int preEnd,int[] in,int inStart,int inEnd){
        if(preStart>preEnd || inStart>inEnd){
            return null;
        }
        
        int rootVal = pre[preStart];
        int rootIndex = 0;
        for(int i=inStart;i<=inEnd;i++){
            if(in[i]==rootVal){
                rootIndex = i;
                break;
            }
        }
        
        int len = rootIndex - inStart;
        TreeNode root = new TreeNode(rootVal);
        root.left= build(pre,preStart+1,preStart+len,in,inStart,rootIndex-1);
        root.right = build(pre,preStart+len+1,preEnd,in,rootIndex+1,inEnd);
        
        return root;
    }
}